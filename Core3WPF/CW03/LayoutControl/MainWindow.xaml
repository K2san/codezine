<mahapps:MetroWindow x:Class="LayoutControl.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:LayoutControl"

        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:mahapps="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"

        mc:Ignorable="d"
        Title="パネル系のレイアウトコントロール" Height="450" Width="800">
  <!-- MahApps.MetroにはSystem.Managementパッケージも必要 -->

  <Window.Resources>
  </Window.Resources>



  <Grid>
    <!-- メインコンテンツ（ハンバーガーメニューのためにMarginで左側を空けておく） -->
    <Grid Margin="30,0,0,0" >
      <b:Interaction.Triggers>
        <b:EventTrigger EventName="MouseDown">
          <b:ChangePropertyAction TargetName="MenuButton"
                                    PropertyName="IsChecked" Value="False" />
        </b:EventTrigger>
      </b:Interaction.Triggers>
      <Grid.Resources>
        <Style TargetType="{x:Type TextBlock}" x:Key="HeaderText">
          <Setter Property="FontSize" Value="18" />
          <Setter Property="Margin" Value="5,3" />
          <Setter Property="TextWrapping" Value="Wrap" />
        </Style>
      </Grid.Resources>

      <!-- FlipView: MahApps.Metro パッケージを使用 -->
      <mahapps:FlipView x:Name="MainFlip" IsBannerEnabled="False" IsNavigationEnabled="False"
                        MouseHoverBorderThickness="0"
                        SelectedIndex="0">
        <mahapps:FlipView.Items>

          <!-- View-1: Grid について -->
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition />
            </Grid.RowDefinitions>
            <Expander Header="Grid" IsExpanded="True" BorderThickness="0">
            <TextBlock Style="{StaticResource HeaderText}">
              <Bold>Grid</Bold> は最もよく使われるレイアウトコントロールです。
              内部を縦・横に区切り、 その区切ったエリア内に子コントロールを配置します。</TextBlock>
            </Expander>
            <Border Grid.Row="1" BorderBrush="Blue" Background="Blue" BorderThickness="3" Margin="10">
              <Grid >
                <Grid.RowDefinitions>
                  <RowDefinition Height="2*" />
                  <RowDefinition Height="3*" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition />
                  <ColumnDefinition />
                  <ColumnDefinition Width="1.5*" />
                </Grid.ColumnDefinitions>
                <TextBlock Background="HotPink" Margin="0,0,1,1">Row=0, Column=0</TextBlock>
                <TextBlock Grid.Column="1" Background="Orange" Margin="1,0,1,1">Row=0, Column=1</TextBlock>
                <TextBlock Grid.Column="2" Background="YellowGreen" Margin="1,0,0,1">Row=0, Column=2</TextBlock>
                <TextBlock Grid.Row="1" Background="LightSeaGreen" Margin="0,1,1,0">Row=1, Column=0</TextBlock>
                <TextBlock Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Background="SkyBlue" Margin="1,1,0,0">Row=1, Column=1<LineBreak/>ColumnSpan=2</TextBlock>
              </Grid>
            </Border>
          </Grid>

          <!-- View-2: StackPanel について -->
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="8*" />
              <RowDefinition Height="351*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition/>
              <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Expander Header="StackPanel" IsExpanded="True" BorderThickness="0" Grid.ColumnSpan="2">
              <TextBlock Style="{StaticResource HeaderText}" Margin="5,3,5,3">
              <Bold>StackPanel</Bold> もよく使われるレイアウトコントロールです。
              縦方向、 または横方向に、 記述した順序で子コントロールを配置します。</TextBlock>
            </Expander>

            <TextBlock Grid.Row="1" HorizontalAlignment="Center"><Underline>Orientation:</Underline> 省略 または <Italic>Vertical</Italic></TextBlock>
            <Border Grid.Row="3" BorderBrush="Blue" BorderThickness="3" Margin="10,2,10,10">
              <StackPanel Background="LightGray">
                <TextBlock Background="PaleVioletRed">1番目の子コントロール</TextBlock>
                <TextBlock Background="PaleGoldenrod" Padding="0,10">2番目の子コントロール</TextBlock>
                <TextBlock Background="LawnGreen" Width="150" HorizontalAlignment="Left">3番目の子コントロール</TextBlock>
              </StackPanel>
            </Border>

            <TextBlock Grid.Row="1" Grid.Column="1" HorizontalAlignment="Center"><Underline>Orientation:</Underline> <Italic>Horizontal</Italic></TextBlock>
            <Border Grid.Row="3" Grid.Column="1" BorderBrush="DarkRed" BorderThickness="3" Margin="10,2,10,10">
              <StackPanel Background="LightGray" Orientation="Horizontal">
                <TextBlock Background="LightSeaGreen">1番目</TextBlock>
                <TextBlock Background="LightSkyBlue" Width="80" TextAlignment="Center">2番目</TextBlock>
                <TextBlock Background="BlueViolet" Height="50" VerticalAlignment="Top">3番目</TextBlock>
              </StackPanel>
            </Border>
          </Grid>

          <!-- View-3: WrapPanel について -->
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="8*" />
              <RowDefinition Height="351*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition/>
              <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Expander Header="WrapPanel" IsExpanded="True" BorderThickness="0" Grid.ColumnSpan="2">
              <TextBlock Style="{StaticResource HeaderText}" Margin="5,3,5,3">
              <Bold>WrapPanel</Bold> はStackPanelの2次元バージョンです。
              縦方向、 または横方向に、 記述した順序で子コントロールを配置していき、
              いっぱいになると「改行」して続けます。</TextBlock>
            </Expander>

            <TextBlock Grid.Row="1" HorizontalAlignment="Center"><Underline>Orientation:</Underline> 省略 または <Italic>Horizontal</Italic></TextBlock>
            <Border Grid.Row="3" BorderBrush="Blue" BorderThickness="3" Margin="10,2,10,10">
              <WrapPanel Background="LightGray">
                <Button Width="100" Height="30" Background="PaleVioletRed">1番目</Button>
                <Button Width="100" Height="50" Background="PaleGoldenrod">2番目</Button>
                <Button Width="100" Height="30" Background="LawnGreen">3番目</Button>
                <Button Width="150" Height="30" Background="CadetBlue">4番目</Button>
                <Button Width="150" Height="50" Background="DarkViolet">5番目</Button>
              </WrapPanel>
            </Border>

            <TextBlock Grid.Row="1" Grid.Column="1" HorizontalAlignment="Center"><Underline>Orientation:</Underline> <Italic>Vertical</Italic></TextBlock>
            <Border Grid.Row="3" Grid.Column="1" BorderBrush="DarkRed" BorderThickness="3" Margin="10,2,10,10">
              <WrapPanel Background="LightGray" Orientation="Vertical">
                <Button Width="150" Height="120" Background="LightSeaGreen">1番目</Button>
                <Button Width="100" Height="120" Background="LightSkyBlue">2番目</Button>
                <Button Width="125" Height="80" Background="BlueViolet">3番目</Button>
                <Button Width="100" Height="80" Background="MediumVioletRed">4番目</Button>
                <Button Width="150" Height="80" Background="Goldenrod">5番目</Button>
              </WrapPanel>
            </Border>
          </Grid>

          <!-- View-4: Canvas について -->
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="8*" />
              <RowDefinition Height="351*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition/>
              <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Expander Header="Canvas" IsExpanded="True" BorderThickness="0" Grid.ColumnSpan="2">
              <TextBlock Style="{StaticResource HeaderText}" Margin="5,3,5,3">
              <Bold>Canvas</Bold> は子コントロールの位置を座標で指定します。
              ウィンドウのサイズ変更には対応しないので、 自前で何らかの対処をすることになります。</TextBlock>
            </Expander>

            <TextBlock Grid.Row="1" HorizontalAlignment="Center"><Underline>ClipToBounds:</Underline> 省略 または <Italic>False</Italic></TextBlock>
            <Border Grid.Row="3" BorderBrush="Blue" BorderThickness="3" Margin="10,2,10,10">
              <Canvas Background="LightGray">
                <Polygon Canvas.Left="10" Canvas.Top="-10" Fill="Red">
                  <Polygon.Points>
                    <Point>80,0</Point>
                    <Point>0,138.564</Point>
                    <Point>160,138.564</Point>
                  </Polygon.Points>
                </Polygon>
                <Rectangle Canvas.Left="80" Canvas.Top="80" Width="200" Height="180" Fill="LimeGreen"/>
                <Border Canvas.Left="80" Canvas.Top="80" Width="200" Height="180" Background="LimeGreen">
                  <TextBlock Margin="10,20" FontSize="12"
                           TextWrapping="Wrap">絶対位置指定は楽なように思えますが、 ウィンドウのサイズ変更に対応するのはなかなか難しいです。</TextBlock>
                </Border>
                <Ellipse Canvas.Left="175" Canvas.Top="125" Width="200" Height="200" Fill="DodgerBlue" Stroke="White" StrokeThickness="2" />
              </Canvas>
            </Border>

            <TextBlock Grid.Row="1" Grid.Column="1" HorizontalAlignment="Center"><Underline>ClipToBounds:</Underline> <Italic>True</Italic></TextBlock>
            <Border Grid.Row="3" Grid.Column="1" BorderBrush="DarkRed" BorderThickness="3" Margin="10,2,10,10">
              <Canvas Background="LightGray" ClipToBounds="True">
                <Polygon Canvas.Left="10" Canvas.Top="-10" Fill="Red">
                  <Polygon.Points>
                    <Point>80,0</Point>
                    <Point>0,138.564</Point>
                    <Point>160,138.564</Point>
                  </Polygon.Points>
                </Polygon>
                <Border Canvas.Left="80" Canvas.Top="80" Width="200" Height="180" Background="LimeGreen">
                  <TextBlock Margin="10,20" FontSize="12"
                           TextWrapping="Wrap">絶対位置指定は楽なように思えますが、 ウィンドウのサイズ変更に対応するのはなかなか難しいです。</TextBlock>
                </Border>
                <Ellipse Canvas.Left="175" Canvas.Top="125" Width="200" Height="200" Fill="DodgerBlue" Stroke="White" StrokeThickness="2" />
              </Canvas>
            </Border>
          </Grid>
        </mahapps:FlipView.Items>
      </mahapps:FlipView>
    </Grid>

    <!-- ハンバーガーメニュー（メインコンテンツの手前に表示される） -->
    <Grid x:Name="MenuGrid" Background="#e066ffcc" Width="30" HorizontalAlignment="Left">
      <Grid.Resources>
        <!-- ハンバーガーボタンの見映えを良くするための設定 -->
        <Style TargetType="{x:Type ToggleButton}">
          <Setter Property="Cursor" Value="Hand" />
          <Setter Property="FocusVisualStyle" Value="{x:Null}" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type ToggleButton}">
                <Border Background="{TemplateBinding Background}" 
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                  <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                </Border>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>

        <!-- メニューの見映えを良くするための設定 -->
        <Style TargetType="{x:Type ListBoxItem}">
          <Setter Property="Margin" Value="0,0" />
          <Setter Property="Padding" Value="5,5,2,5" />
          <Setter Property="Width"
              Value="{Binding ElementName=MenuGrid, Path=ActualWidth, Mode=OneWay}"/>
        </Style>
        <Style TargetType="{x:Type TextBlock}" >
          <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
          <Setter Property="ToolTipService.ToolTip"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
        </Style>
      </Grid.Resources>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition />
      </Grid.RowDefinitions>

      <!-- ハンバーガーボタン（Win10専用） -->
      <ToggleButton x:Name="MenuButton" Content="&#xE700;" FontFamily="Segoe MDL2 Assets" FontSize="18"
                    Width="30" Height="30" HorizontalAlignment="Left"
                    Background="Transparent" BorderThickness="0" >
        <b:Interaction.Triggers>
          <b:EventTrigger EventName="Unchecked">
            <b:ChangePropertyAction TargetName="MenuGrid"
                                    PropertyName="Width" Value="30" />
          </b:EventTrigger>
          <b:EventTrigger EventName="Checked">
            <b:ChangePropertyAction TargetName="MenuGrid"
                                    PropertyName="Width" Value="120" />
          </b:EventTrigger>
        </b:Interaction.Triggers>
      </ToggleButton>

      <!-- メニュー -->
      <ListBox x:Name="MenuList" Grid.Row="1" Background="Transparent" BorderThickness="0"
               FontSize="15" Padding="-1,0"
               SelectedIndex="{Binding ElementName=MainFlip, Path=SelectedIndex, Mode=TwoWay}">
        <ListBoxItem><TextBlock>Grid</TextBlock></ListBoxItem>
        <ListBoxItem>
          <TextBlock>StackPanel</TextBlock>
        </ListBoxItem>
        <ListBoxItem>
          <TextBlock>WrapPanel</TextBlock>
        </ListBoxItem>
        <ListBoxItem>
          <TextBlock>Canvas</TextBlock>
        </ListBoxItem>
      </ListBox>
    </Grid>
  </Grid>
</mahapps:MetroWindow>
